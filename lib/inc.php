<?
/**
Adds an error to the array of errors that is shown to the user.
This function is not used for adding debugging errors.
@param arg_str_error_msg The error message to be shown to the user.
@param arg_arr_error_params	[Optional] Any extra parameters to be added to the error message if the error message has any place holders (Like %s and %d).
@param arg_str_field_name [Optional] The field name of the field that generated this error in case this error is generated by a validation function.
*/
function add_error ($arg_str_error_msg, $arg_arr_error_params=array(), $arg_str_field_name="") {
	global $__errors;
	if (!$arg_arr_error_params) $arg_arr_error_params = array();
	$arr_error = array();
	$arr_error['error_msg'] = $arg_str_error_msg;
	if ($arg_arr_error_params) $arr_error['error_params'] = $arg_arr_error_params;
	if ($arg_str_field_name) $arr_error['field_name'] = $arg_str_field_name;
	$__errors[] = $arr_error;
}
//------------------------------------------------------------------------
/**
Adds an information message to the global array of information.
@param arg_str_info_msg the message that is shown to the user.
@param arg_arr_info_params [Optional] any extra parameters added to the info message if the message text has placeholders (Like %s or %d).
@param arg_type [Optional] The type of the message that can be ("info" or "warning") which decides the style of the information shown.
*/
function add_info ($arg_str_info_msg, $arg_arr_info_params=array(), $arg_type="info") {
	global $__info;
	$arr_info = array();
	$arr_info['info_msg'] = $arg_str_info_msg;
	if ($arg_arr_info_params) $arr_info['info_params'] = $arg_arr_info_params;
	$arr_info['type'] = $arg_type;
	$__info[] = $arr_info;
}


//------------------------------------------------------------------------
/**
custom error handler to show a full stack trace if DEBUG == true 
or saves the stack trace to a log file if DEBUG == false
@param errno the error number of the error
@param errmsg the error message to be printed
@param filename the file name of the file that produced the error
@param linenum the error line number
@param vars extra variables
*/
function error_handler($errno, $errmsg, $filename, $linenum, $vars)
{
	global $arr_dbprofiles;
	if (!in_array($errno, array(1, 2, 4, 16, 32, 64, 128, 256, 512))) return false;		// if the error is a notice then do nothing
	$str_error .= "<h3><font color='#990000'>" . $errmsg . "</font></h3>\n<h4>";
	$arr_trace = debug_backtrace();
	next($arr_trace);
	while (list(,$arr_function) = each($arr_trace)) {
		$args = array();
		if (is_array($arr_function['args'])) {
			while (list(, $arg) = each($arr_function['args'])) {
				if (is_numeric($arg)) {
					$args[] = $arg;
				} elseif (is_array($arg)) {
					$args[] = var_export($arg, true);
				} else {
					$args[] = "\"" . (is_object($arg) ? get_class($arg) : $arg) . "\"";
				}
			}
		}
		$str_error .= " - " . $arr_function["file"] . " - Line: " . $arr_function['line'] . " - " . ($arr_function['class'] ? $arr_function['class'] . $arr_function['type'] : "") . $arr_function['function'] . "(" . join(", ", $args) . ");<br/>\n";
	}
	$str_error .= "</h4>\n\n";
	//if (ereg("mysql_connect", $str_error)) $str_error = "MySQL Connect Error: on DB Profile: " . $arr_dbprofiles[DEFAULT_DBPROFILE];
	// if debug = true or the client is on the same machine as the server then debug messages can be shown.
	if (DEBUG == true) {
		print $str_error;
		exit();
	} else {
		// Log error
		$fp = fopen(PHP_ROOT . LOG_FILE, "a+");
		if (flock($fp, LOCK_EX)) { // do an exclusive lock
			fwrite($fp, date("Y / m / d  H:i:s") . ":\n---------------------\n" . strip_tags($str_error) . "---------------------------------------------\n");
			flock($fp, LOCK_UN); // release the lock
		}
		fclose($fp);
		print INTERNAL_ERRORMSG;
		exit();
	}
}
//------------------------------------------------------------------------
/**
NOW() gets the current date and time in a format that is mysql like 2009-01-31 16:50:33
used as a php replacement for the MySQL function NOW()
It can also be used to get a date before or after now.
If the $arg_plus_minus_seconds is negative then the date is in the past and if it is positive then the date is in the future leave it empty 
@param $arg_plus_minus_seconds is the number of seconds added to thor 0e current time if the number is negative it is subtracted from the current time
@return current date and time 
*/
function NOW($arg_plus_minus_seconds=0) {
	$arg_plus_minus_seconds = intval($arg_plus_minus_seconds);
	return date('Y-m-d H:i:s', time() + $arg_plus_minus_seconds);
}
//------------------------------------------------------------------------
?>
